{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAENC,mBAAS,IAFH,mBAEpCC,EAFoC,KAExBC,EAFwB,KAoB5C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAQd,2BACIO,KAAO,OACPC,MAAUT,EACVU,SArBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAa,IAAD,EAEZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAqBtC,OAbCC,qBAAU,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAAEpB,IAGEqB,EDnBwBK,CAAc1B,GAAjCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAIpB,OACI,oCACI,wBAAIJ,UAAU,qCAAsChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,aAEb,yBAAKA,UAAU,aAIPH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACJD,UEMlBkB,EAzBM,WAAK,IAAD,EAEe1C,mBAAS,CAAC,cAFzB,mBAEd2C,EAFc,KAEF5C,EAFE,KAIrB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGA,4BAEQ4C,EAAWpB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CACIA,SAAWA,EACX2B,IAAM3B,U,MCXlC8B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.27be8e00.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nexport const AddCategory = ({setCategories}) => {\n\n    const [ inputValue, setInputValue ] = useState('');\n\n    const handleInputChange = (e)=>{\n        \n        setInputValue( e.target.value) ;\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats =>  [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type = \"text\" \n                value = { inputValue }\n                onChange = { handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n\n\n\n\n\n\n \n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=U8PwxGIjpAX4tYEtQID62sEEgheR9Ui7`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\"> Loading </p> }\n\n            <div className=\"card-grid\"> \n                \n                \n                {\n                    images.map((img)=>(\n                        <GifGridItem \n                            key={img.id} \n                            { ...img } \n                        />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category )=>{\n    \n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n\n     useEffect(( )=>{\n\n        getGifs(category)\n            .then( imgs=>{\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    })\n            });\n\n    }, [ category ])\n\n\n    return state; // { data:[], loading: true }\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return(\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n\n            <ol>\n                { \n                    categories.map((category) => (\n                        <GifGrid  \n                            category={ category }\n                            key={ category }\n                        />\n                    )) \n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />, \n    document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}